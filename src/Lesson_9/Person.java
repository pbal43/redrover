package Lesson_9;

public class Person {

    public static double pi = 3.1415; // поле для всех одно и смысла нет хранить в каждом экземляре
    // static принадлежит классу и обращаться к нему можно через класс (нет смысла через инстанс - и не правильно)

    String name;

    private int age;

    protected String surname;

    public Person() { // конструктор - одноименный с классом, добавляется после полей, без передачи аргументов
    }

    public Person(String name) { // конструктор - одноименный с классом, добавляется после полей, с передачей аргументов
        this.name = "Mr. " + name;
    }

    public Person(String name, int age) { // конструктор - одноименный с классом, добавляется после полей, с передачей аргументов
        this(name); // в этом случае вызовем внутри констркутора другой конструктор (предыдущий только с именем)
        // нужно для правильной обработки (тут всегда добавится Mr из предыдущего конструктора) - а можно и просто написать this.name = name;
        this.age = age;
    }

    // внутри статических методов не можем обращаться к нестатическим полям или методам (ни имеют значения у инстансов, а не у класса)

//    public static void printName() {
//        System.out.println(name); // подстветит ошибку - non static (name)
//    }




    public String getName() {
        return name;
    }

    void setAge(int age) {
        this.age = age; // ключевое слово this - объект в классе (тут указывает именно на переменную в экземпляре класса)
        // можно и без этого в сеттере, но тогда название аргумента и поля должны отличаться, но в Java так не делают
    }

    int getAge() {
        if (name.equals("Anna")) {
            return 16; // на примере показано, зачем доступ к полям - через методы - то есть их можно настроить для доступа
        } else {
            return age; // в геттере можно не использовать this (тут не записываем в поле)
        }
    }

}
